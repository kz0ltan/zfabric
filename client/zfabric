#!/usr/bin/env python3

import argparse
import json
import os
import requests
import sys
from typing import List, Dict

import pyperclip

TOKEN_PATH="~/.config/zfabric/server_token"
#BASE_URL="http://websrv4.kzoltan.srv:13337"
BASE_URL="http://localhost:13337"

def read_token(path):
    full_path = os.path.expanduser(path)
    with open(full_path, 'r') as f:
        return f.read().rstrip()

def validate_key_value(arg):
    if '=' not in arg:
        raise argparse.ArgumentTypeError(f"Argument '{arg}' is not in key=value format")
    return arg

def parse_variables(variables):
    return dict([v.split('=') for v in variables])

def read_input(path=None):
    if args.ifile:
        input_data = open(args.ifile, 'r').read()
    else:
        input_data = sys.stdin.read().rstrip()
    return {'input': input_data}

def file_exists(file_path):
    """Custom argparse type to check if the file path is valid."""
    if not os.path.exists(file_path):
        raise argparse.ArgumentTypeError(f"File '{file_path}' does not exist.")
    if not os.path.isfile(file_path):
        raise argparse.ArgumentTypeError(f"'{file_path}' is not a file.")
    return file_path

def file_not_exists(file_path):
    """Custom argparse type to check if the file at path does not exist."""
    if os.path.exists(file_path):
        raise argparse.ArgumentTypeError(f"File '{file_path}' already exists.")
    return file_path

def set_options(args):
    options = dict()
    if args.num_predict is not None:
        options["num_predict"] = args.num_predict
    if args.temperature is not None:
        options["temperature"] = args.temperature
    if args.topp is not None:
        options["topp"] = args.topp
    if args.frequencypenalty is not None:
        options["frequencypenalty"] = args.frequencypenalty
    if args.presencepenalty is not None:
        options["presencepenalty"] = args.presencepenalty
    return options

def send_query(url, params={}, data=None, stream:bool=False):
    headers = {
        'Authorization': 'bearer ' + TOKEN,
        'Content-Type': 'Application/json'
    }
    if data is not None:
        response = requests.post(url, headers=headers, json=data, stream=params["stream"], params=params)
    else:
        response = requests.get(url, headers=headers, params=params)
    return response

def print_usage(response_json):
    if "usage" in response_json:
        print()
        print("Prompt tokens: {}".format(response_json["usage"]["prompt_tokens"]))
        print("Completion tokens: {}".format(response_json["usage"]["completion_tokens"]))
        print("Total tokens: {}".format(response_json["usage"]["total_tokens"]))

def print_response(response, ofile:str=None, ccopy:bool=False, stream:bool=False, usage:bool=False):
    if stream:
        response_text = ""
        for chunk in response.iter_lines():
            response_json = json.loads(chunk)
            if "response" in response_json:
                response_text += response_json["response"]
                print(response_json["response"], end='', flush=True)
            print_usage(response_json)
        print("\n", end='', flush=True)
    else:
        response_json = response.json()
        if "response" in response_json:
            print(response_json["response"])
        print_usage(response_json)

    if ofile is not None:
        with open(ofile, 'w') as f:
            f.write(response_text)

    if ccopy is not None:
        pyperclip.copy(response_text)

def print_list(response_list:List[str], ccopy:bool=False, ofile:str=None):
    for elem in response_list:
        print(elem)

    if ofile is not None:
        with open(ofile, 'w') as f:
            f.write(response_list)

    if ccopy is not None:
        pyperclip.copy(response_list)

class CustomAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if self.default is not None and values is None:
            # If the flag was specified without a value, set the default value
            setattr(namespace, self.dest, self.default)
        elif values is None:
            # If the flag was not specified at all, set to None
            setattr(namespace, self.dest, None)
        else:
            # If the flag was specified with a value, use that value
            setattr(namespace, self.dest, values)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="zFabric client application")
    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument('-l', '--list', type=str, action=CustomAction,
            nargs='?', choices=["profiles", "patterns"], const="patterns",
            help="List patterns/profiles")
    group.add_argument('-p', '--pattern', default=None, help="Pattern to use")

    parser.add_argument('-i', '--ifile', type=file_exists, default=None,
            help="Input file path")
    parser.add_argument('-o', '--ofile', type=file_not_exists, default=None,
            help="Output file path")
    parser.add_argument('-c', '--copy', default=False, action='store_true',
            help="Copy output to clipboard")
    #parser.add_argument('-a', '--attachment', type=file_exists, default=None,
    #        help="File attachment path or URL")
    parser.add_argument('-v', '--variable', action='append', type=validate_key_value,
            default=list(), help="Input variables to be replaced in patterns")
    parser.add_argument('-u', '--usage', type=bool, default=False,
            help="Print token usage if streaming (currently the Azure API is buggy)")

    parser.add_argument('-n', '--num_predict', default=None, type=int,
            help="Maximum number of tokens to predict")
    parser.add_argument('-t', '--temperature', default=None, type=float,
            help="Set temperature for the model. Increasing the temperature will make the model answer more creatively.")
    parser.add_argument('-T', '--topp', default=None, type=float,
            help="Set top-P value. Output tokens are selected from the most to least probable until the sum of their probabilities equals to top-P.")
    parser.add_argument('-F', '--frequencypenalty', default=None, type=float,
            help="Positive values penalize new tokens based on their existing frequency in the text so far, "
                "decreasing the model's likelihood to repeat the same line verbatim.")
    parser.add_argument('-P', '--presencepenalty', default=None, type=float,
            help="Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.")

    parser.add_argument('-r', '--profile',
            help="Profile to use (defined in server config.json)")
    parser.add_argument('--no-stream', default=False, action="store_true",
            help="Disable streaming response (default: False)")
    parser.add_argument('-m', '--model', default=None, help="Model to query")

    args = parser.parse_args()
    variables = parse_variables(args.variable)
    global TOKEN
    TOKEN=read_token(TOKEN_PATH)

    if args.list:
        response = send_query(BASE_URL + "/" + args.list)
        print_list(response.json()["response"],
                ccopy=args.copy,
                ofile=args.ofile
        )
    elif args.pattern:
        url = BASE_URL + "/patterns/" + args.pattern

        params = {
            'profile': args.profile,
            'variables': variables,
            'model': args.model,
            'options': json.dumps(set_options(args)),
            'stream': not args.no_stream
        }

        data = read_input(args.ifile)

        response = send_query(url, params, data)
        print_response(
                response,
                ofile=args.ofile,
                ccopy=args.copy,
                stream=not args.no_stream,
                usage=not args.no_stream and args.usage
        )
    else:
        # input / output only
        pass
