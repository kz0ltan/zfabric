#!/usr/bin/env python3

""" zFabric client """

import argparse
import json
import os
import select
import sys
from typing import List, Dict, Optional

from dotenv import load_dotenv
import pyperclip
import requests

import tools.yt

ENV_PATH = "~/.config/zfabric/.env"
# BASE_URL="http://websrv4.kzoltan.srv:13337"
BASE_URL = "http://localhost:13337"


def validate_key_value(arg):
    """ Simple test to check if key-value pair is readable """
    if "=" not in arg:
        raise argparse.ArgumentTypeError(
            f"Argument '{arg}' is not in key=value format")
    return arg


def parse_variables(variables_to_parse):
    """ Return a dict of variables """
    return dict([v.split("=") for v in variables_to_parse])


def stdin_has_data():
    """ Test stdin for data
    """
    if sys.stdin.isatty():  # No data if running interactively
        return False
    return select.select([sys.stdin], [], [], 0)[0] != []


def get_yt_data(yt_url):
    """ Wrapper to external function to get data from YT
    """
    options = type(
        "",
        (),
        {
            "duration": False,
            "transcript": False,
            "comments": False,
            "metadata": False,
            "lang": "en",
        },
    )()
    return tools.yt.main_function(yt_url, options, return_only=True)


def read_input(path: Optional[str] = None, yt_url: Optional[str] = None):
    """ Read input from file/stdin on other sources """
    input_data = {"input": None}

    if path:
        with open(args.ifile, "r", encoding="utf-8") as f:
            input_data["input"] = f.read()
    elif stdin_has_data():
        input_data["input"] = sys.stdin.read().rstrip()

    if yt_url:
        yt_data = get_yt_data(yt_url)
        if input_data["input"] is None:
            input_data["input"] = json.dumps(yt_data)
        else:
            input_data["yt_input"] = json.dumps(yt_data)

    return input_data


def file_exists(file_path):
    """Custom argparse type to check if the file path is valid."""
    if not os.path.exists(file_path):
        raise argparse.ArgumentTypeError(f"File '{file_path}' does not exist.")
    if not os.path.isfile(file_path):
        raise argparse.ArgumentTypeError(f"'{file_path}' is not a file.")
    return file_path


def file_not_exists(file_path):
    """Custom argparse type to check if the file at path does not exist."""
    if os.path.exists(file_path):
        raise argparse.ArgumentTypeError(f"File '{file_path}' already exists.")
    return file_path


def set_options(parsed_args):
    """ Set options in a JSON compatible format
    """
    options = {}
    if parsed_args.num_predict is not None:
        options["num_predict"] = parsed_args.num_predict
    if parsed_args.temperature is not None:
        options["temperature"] = parsed_args.temperature
    if parsed_args.topp is not None:
        options["topp"] = parsed_args.topp
    if parsed_args.frequencypenalty is not None:
        options["frequencypenalty"] = parsed_args.frequencypenalty
    if parsed_args.presencepenalty is not None:
        options["presencepenalty"] = parsed_args.presencepenalty
    return options


def send_query(url, params={}, data=None, stream: bool = False):
    headers = {
        "Authorization": "bearer " + os.getenv("ZF_SERVER_TOKEN"),
        "Content-Type": "Application/json",
    }
    if data is not None:
        response = requests.post(
            url, headers=headers, json=data, stream=params["stream"], params=params
        )
    else:
        response = requests.get(url, headers=headers, params=params)

    return response


def print_usage(need_print: bool, response_json: Dict):
    """Print errors from HTTP responses"""
    if need_print and "usage" in response_json:
        print()
        print(f"Prompt tokens: {response_json['usage']['prompt_tokens']}")
        print(
            f"Completion tokens: {response_json['usage']['completion_tokens']}")
        print(f"Total tokens: {response_json['usage']['total_tokens']}")


def print_error(response_json):
    """Print usage data from HTTP responses"""
    if "error" in response_json:
        print("Error: " + response_json["error"])


def print_response(
    response,
    ofile: Optional[str] = None,
    ccopy: bool = False,
    stream: bool = False,
    usage: bool = False,
):
    """ Print (streamind) response to stdout and optionally:
        1. save to file
        2. copy to clipboard
    """

    response_text = ""
    if stream:
        for chunk in response.iter_lines():
            response_json = json.loads(chunk)
            if "response" in response_json:
                response_text += response_json["response"]
                print(response_json["response"], end="", flush=True)
            print_usage(usage, response_json)
            print_error(response_json)
        print("\n", end="", flush=True)
    else:
        response_json = response.json()
        if "response" in response_json:
            response_text = response_json["response"]
            print(response_text)
        print_usage(usage, response_json)
        print_error(response_json)

    write_alternative_outputs(response_text, ccopy=ccopy, ofile=ofile)


def write_alternative_outputs(text: str, ccopy: bool = False, ofile: Optional[str] = None):
    """ Write output using alternative (non-stdout) outputs
    """
    if ofile is not None:
        with open(ofile, "w", encoding="utf-8") as f:
            f.write(text)

    if ccopy is not None:
        pyperclip.copy(text)


def print_str(output: str, ccopy: bool = False, ofile: Optional[str] = None):
    """ Print string to stdout and optionally:
        1. save to file
        2. copy to clipboard
    """

    print(output)
    write_alternative_outputs(output, ccopy=ccopy, ofile=ofile)


def print_list(response_list: List[str], ccopy: bool = False, ofile: Optional[str] = None):
    """ Print list of strings to stdout and optionally:
        1. save to file
        2. copy to clipboard
    """

    for elem in response_list:
        print(elem)
    write_alternative_outputs('\n'.join(response_list),
                              ccopy=ccopy, ofile=ofile)


class CustomAction(argparse.Action):
    """ Custom action for ArgParse:
        1. If the flag was specified without a value, set the default value
        1. If the flag was not specified at all, set to None
        1. If the flag was specified with a value, use that value
    """

    def __call__(self, cparser, namespace, values, option_string=None):
        if self.default is not None and values is None:
            # If the flag was specified without a value, set the default value
            setattr(namespace, self.dest, self.default)
        elif values is None:
            # If the flag was not specified at all, set to None
            setattr(namespace, self.dest, None)
        else:
            # If the flag was specified with a value, use that value
            setattr(namespace, self.dest, values)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="zFabric client application")
    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument(
        "-l",
        "--list",
        type=str,
        action=CustomAction,
        nargs="?",
        choices=["profiles", "patterns"],
        const="patterns",
        help="List patterns/profiles",
    )
    group.add_argument("-p", "--pattern", default=None, help="Pattern to use")

    parser.add_argument(
        "-i", "--ifile", type=file_exists, default=None, help="Input file path"
    )
    parser.add_argument(
        "-o", "--ofile", type=file_not_exists, default=None, help="Output file path"
    )
    parser.add_argument(
        "-c",
        "--copy",
        default=False,
        action="store_true",
        help="Copy output to clipboard",
    )
    # parser.add_argument('-a', '--attachment', type=file_exists, default=None,
    #        help="File attachment path or URL")
    parser.add_argument(
        "-y",
        "--youtube",
        type=str,
        default=None,
        help="YT URL to download transcript and use it as {{input}} or {{yt_input}}",
    )
    parser.add_argument(
        "-v",
        "--variable",
        action="append",
        type=validate_key_value,
        default=[],
        help="Input variables to be replaced in patterns",
    )
    parser.add_argument(
        "-u",
        "--usage",
        type=bool,
        default=False,
        help="Print token usage if streaming (currently the Azure API is buggy)",
    )

    parser.add_argument(
        "-n",
        "--num_predict",
        default=None,
        type=int,
        help="Maximum number of tokens to predict",
    )
    parser.add_argument(
        "-t",
        "--temperature",
        default=None,
        type=float,
        help="Set temperature for the model. Increasing the temperature will "
        "make the model answer more creatively.",
    )
    parser.add_argument(
        "-T",
        "--topp",
        default=None,
        type=float,
        help="Set top-P value. Output tokens are selected from the most to "
        "least probable until the sum of their probabilities equals to top-P.",
    )
    parser.add_argument(
        "-F",
        "--frequencypenalty",
        default=None,
        type=float,
        help="Positive values penalize new tokens based on their existing "
        "frequency in the text so far, decreasing the model's likelihood "
        "to repeat the same line verbatim.",
    )
    parser.add_argument(
        "-P",
        "--presencepenalty",
        default=None,
        type=float,
        help="Positive values penalize new tokens based on whether they "
        "appear in the text so far, increasing the model's likelihood to talk "
        "about new topics.",
    )

    parser.add_argument(
        "-r", "--profile", help="Profile to use (defined in server config.json)"
    )
    parser.add_argument(
        "--no-stream",
        default=False,
        action="store_true",
        help="Disable streaming response (default: False)",
    )
    parser.add_argument("-m", "--model", default=None, help="Model to query")

    args = parser.parse_args()
    variables = parse_variables(args.variable)
    load_dotenv(os.path.expanduser(ENV_PATH))

    data = read_input(args.ifile, args.youtube)

    if args.list:
        response = send_query(BASE_URL + "/" + args.list).json()
        print_error(response)
        if "response" in response:
            print_list(response["response"], ccopy=args.copy, ofile=args.ofile)
    elif args.pattern:
        url = BASE_URL + "/patterns/" + args.pattern

        params = {
            "profile": args.profile,
            "variables": variables,
            "model": args.model,
            "options": json.dumps(set_options(args)),
            "stream": not args.no_stream,
        }

        response = send_query(url, params, data)
        print_response(
            response,
            ofile=args.ofile,
            ccopy=args.copy,
            stream=not args.no_stream,
            usage=not args.no_stream and args.usage,
        )
    else:
        print_str(data["input"], ccopy=args.copy, ofile=args.ofile)
